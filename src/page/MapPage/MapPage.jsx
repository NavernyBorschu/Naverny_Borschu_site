import { useJsApiLoader } from '@react-google-maps/api';
import React, { useCallback,  useState } from 'react';
import {Link} from "react-router-dom";
import { Autocomplete } from '../../components/Autocomplete';
import { Map } from '../../components/Map';
import { Filters } from '../../components/Filters/Filters';
import { GeoButton } from "../../components/GeoButton";
import { MODES } from '../../components/Map/Map';
import { usePlaces } from '../../context/PlacesContext';
import { useBorsch } from '../../context/BorschContext';
import { useFilters } from '../../context/FiltersContext';
import style from './MapPage.module.scss';


// –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
const API_KEY=process.env.REACT_APP_API_KEY_MAP;
const libraries=['places'];
const defaultCenter = {
  lat: 50.450001,
  lng: 30.523333
}


export const MapPage = ( )=> {  
  const [center, setCenter] = useState(() => {
    const savedLocation = localStorage.getItem('user_location');
    return savedLocation ? JSON.parse(savedLocation) : defaultCenter;
  });
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–∏—Å–∫–∞
  const [originalCenter, setOriginalCenter] = useState(() => {
    const savedLocation = localStorage.getItem('user_location');
    return savedLocation ? JSON.parse(savedLocation) : defaultCenter;
  });
  

  
  const { places, loading: placesLoading, addPlace, updatePlacesBySearch, getFirstPlaceCenter, restoreAllPlaces } = usePlaces();
  const { borsch, loading: borschLoading } = useBorsch();
  const { filters, setRestorePlaces, clearSearchQuery } = useFilters();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ localStorage
  React.useEffect(() => {
    const handleStorageChange = () => {
      const savedLocation = localStorage.getItem('user_location');
      if (savedLocation) {
        const newLocation = JSON.parse(savedLocation);
        setOriginalCenter(newLocation);
        // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–µ–Ω—Ç—Ä
        if (!filters.searchQuery || filters.searchQuery.trim() === '') {
          setCenter(newLocation);
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [filters.searchQuery]);
  
  // –¢–µ–ø–µ—Ä—å places —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
  const placesToShow = places;
  
  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–∞
  React.useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
    const savedFilteredPlaces = localStorage.getItem('filteredPlaces');
    const savedFilters = localStorage.getItem('borschFilters');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞, –Ω–æ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π - —ç—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (savedFilteredPlaces && savedFilters && (!filters.searchQuery || filters.searchQuery.trim() === '') && places.length === 0) {
      try {
        const parsedFilters = JSON.parse(savedFilters);
        if (parsedFilters.searchQuery && parsedFilters.searchQuery.trim() !== '') {
          return;
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      }
    }
    
    if (filters.searchQuery && filters.searchQuery.trim() !== '') {
      updatePlacesBySearch(filters.searchQuery);
    } else {
      updatePlacesBySearch('');
    }
  }, [filters.searchQuery, updatePlacesBySearch, places.length]);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç
  React.useEffect(() => {
    setRestorePlaces(restoreAllPlaces);
  }, [setRestorePlaces, restoreAllPlaces]);

  // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –º–µ—Å—Ç
  React.useEffect(() => {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if (placesLoading) {
      return;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –Ω–∞–π–¥–µ–Ω—ã –º–µ—Å—Ç–∞
    if (filters.searchQuery && filters.searchQuery.trim() !== '' && places.length > 0) {
      const firstPlaceCenter = getFirstPlaceCenter();
      if (firstPlaceCenter) {
        // console.log('üéØ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞:', firstPlaceCenter);
        setCenter(firstPlaceCenter);
      }
    } else if (!filters.searchQuery || filters.searchQuery.trim() === '') {
      // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É
      setCenter(originalCenter);
    }
  }, [places, filters.searchQuery, placesLoading, getFirstPlaceCenter, originalCenter]);
  
  const mode = Number(localStorage.getItem('mode')) || MODES.MOVE; 
  const { isLoaded } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: API_KEY,
    libraries
  })

  const onMarkerAdd=useCallback((coordinates)=>{            
    const newPlace = {
      id: `${coordinates.lat}`,
      adress:"",        
      country:"", 
      city:"",
      name_shopping_mall:"",
      location:coordinates,      
      places:[  
         {place_id:`${coordinates.lat}+1`,
          name:"–ö–∞—Ñ–µ",
          type:"—Ä–µ—Å—Ç–æ—Ä–∞–Ω"},           
      ],
      grade:"9.0"
    };
    
    addPlace(newPlace);
  },[addPlace]) 
  
 const onPlaceSelect=useCallback((coordinates)=>{
    setCenter(coordinates);
    setOriginalCenter(coordinates); // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç–∞
  },[])
 

  return (        
    <div className={style.pageHome}>      
      {mode===MODES.SET_MARKER && 
      < div className={style.boxGeo}>
        <Autocomplete isLoaded={isLoaded} onSelect={onPlaceSelect}/>
        <GeoButton />
      </div>
      
      }
      {mode===MODES.MOVE &&   
      <> 
        <Filters/>  
        <div className={style.btnWrap}> 
          <Link to="/"  className={style.btn}>–ú–∞–ø–∞</Link>          
          <Link to="/list"  className={style.btn_inl}>–°–ø–∏—Å–æ–∫</Link>               
        </div>
        <div className={style.borsch}>
          {borschLoading || placesLoading ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...' : (
            <span className={style.borschCount}>
              (–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ {borsch?.length || 0} –±–æ—Ä—â—ñ–≤)
            </span>
          )}
        </div>
      </>
     }           
      {isLoaded && !placesLoading ? (
        <>
          {/* –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ */}
          {filters.searchQuery && filters.searchQuery.trim() !== '' && places.length === 0 && (
            <div className={style.noResultsMessage}>
              <button 
                className={style.closeButton}
                onClick={() => clearSearchQuery()}
                aria-label="–ó–∞–∫—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
              >
                √ó
              </button>
              –ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –∂–æ–¥–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            </div>
          )}
          <Map 
            center={center} 
            mode={mode} 
            places={placesToShow} 
            onMarkerAdd={onMarkerAdd}          
          />
        </>
      ) : (
        <div className={style.loadingContainer}>
          {!isLoaded ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏...' : '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–∫–ª–∞–¥—ñ–≤...'}
        </div>
      )} 
    </div>
  );
}

