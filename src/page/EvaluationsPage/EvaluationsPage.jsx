import { useState, useCallback, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import { Grade } from "../../components/Grade";
import { GradeWithIcons } from "../../components/GradeWithIcons";
import { ReactComponent as IconMeat } from './meat.svg';
import { ReactComponent as IconBeetroot } from './beetroot.svg';
import { ReactComponent as IconDensity } from './vegetable.svg';
import { ReactComponent as IconSalt } from './salt.svg';
import { ReactComponent as IconAftertaste } from './aftertaste.svg';
import { ReactComponent as IconServing } from './serving.svg';
import { ReactComponent as IconSmileLeft } from './fxemoji_angry.svg';
import { ReactComponent as IconSmileRight } from './fxemoji_smiletongue.svg';
import { ReactComponent as IconBack } from './arrow_back.svg';
import { FotoBorschGallary } from "../../components/FotoBorschGallary";
import { Button } from "../../components/Button";
import {CardSaveEvalutions} from "../../components/CardSaveEvalutions";
import {Modal} from '../../components/Modal';
import { useBorsch } from '../../context/BorschContext';
import { usePlaces } from '../../context/PlacesContext';
import { useComments } from '../../context/CommentsContext';
import style from './EvaluationsPage.module.scss';

const GradesArray = [
  {
    key: "meat",
    icon: IconMeat,
    title: "–ú'—è—Å–æ–≤–∏—Ç—ñ—Å—Ç—å",
    subtitle_left: "–∂–æ–¥–Ω–æ–≥–æ —à–º–∞—Ç–æ—á–∫–∞",
    subtile_right: "—É –∫–æ–∂–Ω—ñ–π –ª–æ–∂—Ü—ñ",
  },
  {
    key: "beetroot",
    icon: IconBeetroot,
    title: "–ë—É—Ä—è–∫–æ–≤—ñ—Å—Ç—å",
    subtitle_left: "–ª–µ–¥—å —Ä–æ–∂–µ–≤–∏–π",
    subtile_right: "–Ω–∞—Å–∏—á–µ–Ω–æ-–±–æ—Ä–¥–æ–≤–∏–π",
  },
  {
    key: "density",
    icon: IconDensity,
    title: "–ì—É—Å—Ç–∏–Ω–∞",
    subtitle_left: "—Ä—ñ–¥–∫–∏–π",
    subtile_right: "–ª–æ–∂–∫–∞ —Å—Ç–æ—ó—Ç—å",
  },
  {
    key: "salt",
    icon: IconSalt,
    title: "–°–æ–ª–æ–Ω—ñ—Å—Ç—å",
    subtitle_left: "–ø—Ä—ñ—Å–Ω–∏–π",
    subtile_right: "–ø–µ—Ä–µ—Å–æ–ª–µ–Ω–∏–π",
  },
  {
    key: "aftertaste",
    icon: IconAftertaste,
    title: "–ü—ñ—Å–ª—è—Å–º–∞–∫",
    subtitle_left: "–Ω–µ—Å–º–∞—á–Ω–æ",
    subtile_right: "–≤–∞—É!",
  },
  {
    key: "serving",
    icon: IconServing,
    title: "–ü–æ–¥–∞—á–∞",
    subtitle_left: "–Ω–µ–æ—Ö–∞–π–Ω–æ",
    subtile_right: "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∏–π —Å—Ç–∏–ª—å",
  },
];

export const EvaluationsPage = () => {
    const [isActive, setIsActive] = useState(false);
    const [isSent, setIsSent] = useState(false);
    const { borschId } = useParams();
    const [comment, setComment] = useState("");
    const [grades, setGrades] = useState({
      meat: null,
      beetroot: null,
      density: null,
      salt: null,
      aftertaste: null,
      serving: null,
      overall: null,
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ JSON
    const { getBorschById } = useBorsch();
    const { getPlaceById } = usePlaces();
    const { addComment } = useComments();
    
    const borschOne = getBorschById(borschId);
    const place = borschOne ? getPlaceById(borschOne.place_id) : null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (–∫—Ä–æ–º–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    const isFormValid = grades.meat !== null && grades.beetroot !== null && 
                        grades.density !== null && grades.salt !== null && 
                        grades.aftertaste !== null && grades.serving !== null && 
                        grades.overall !== null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –∫–∞–∫ null - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–∞–º
    useEffect(() => {
      if (borschOne) {
        // console.log('üì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –±–æ—Ä—â–∞:', borschOne);
        // console.log('üéØ –í—Å–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∫–∞–∫ null - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç—å');
        // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ü–µ–Ω–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏
      }
    }, [borschOne]);
    
    const handleGradeChange = (key, value) => {
      // console.log(`üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è ${key}: ${value}`);
      setGrades((prev) => {
        const newGrades = { ...prev, [key]: value };
        // console.log('üîÑ –ù–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏:', newGrades);
        // console.log('‚úÖ –í—Å–µ –æ—Ü–µ–Ω–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã:', Object.values(newGrades).every((val) => val !== null));
        return newGrades;
      });
    };

        const handleSubmitForm = (e) => {
      e.preventDefault();
      // console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã...');
      // console.log('üìä –¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏:', grades);
      // console.log('‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞:', isFormValid);
      // console.log('üí¨ –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', comment);
      // console.log('üç≤ –î–∞–Ω–Ω—ã–µ –±–æ—Ä—â–∞:', borschOne);
      
      setIsSent((prev) => !prev);
      if (!isFormValid) {
        // console.log('‚ùå –§–æ—Ä–º–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
        return;
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –æ—Ü–µ–Ω–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const ratingUpdates = {
        rating_meat: grades.meat,
        rating_beet: grades.beetroot,
        rating_density: grades.density,
        rating_salt: grades.salt,
        rating_aftertaste: grades.aftertaste,
        rating_serving: grades.serving
      };
      
      // console.log("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:", ratingUpdates);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      if (borschOne) {
        const newComment = {
          id_borsch: borschId,
          messege: comment,
          ...ratingUpdates,
          overall_rating: grades.overall?.toString() || "5.0"
        };
        
        // console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç:", newComment);
        // console.log("üìä –û—Ü–µ–Ω–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", ratingUpdates);
        // console.log("üç≤ ID –±–æ—Ä—â–∞:", borschId);
        
                 addComment(newComment);
        //  console.log("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", newComment);
      } else {
        console.log("‚ùå –î–∞–Ω–Ω—ã–µ –±–æ—Ä—â–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      }
      
      // console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", { ...grades, comment });
    };

    const onCloseForm = useCallback(() => {
      setIsActive((prev) => !prev);
    }, []);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!borschOne || !place) {
      return (
        <div className={style.wrapp}>
          <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</p>
        </div>
      );
    }



  return (
    <div className={style.wrapp} key={"evaluations_page"}>
      <FotoBorschGallary images={borschOne.photo_urls} height={"215px"}/>
      <Link className={style.back} to={`/borsch/${borschId}`}><IconBack/></Link>
      <div className={style.contentImg}>
        <div className={style.nameBox1}>
          <p className={style.textName}>{borschOne.name}</p>
          <p className={style.textName}>{place.name}</p>
        </div>
        <div className={style.nameBox2}>
          <p className={style.textName}>{borschOne.price}</p>
          <p className={style.textName}>{borschOne.weight}</p>          
        </div>
      </div>
      <h3 className={style.title}>–û—Ü—ñ–Ω–∏ —Å–º–∞–∫ –±–æ—Ä—â—É</h3>     
      {GradesArray.map((item) => (
        <Grade
          key={item.key}
          icon={item.icon}
          title={item.title}
          labels={[item.subtitle_left, item.subtile_right]}        
          onChange={(val) => handleGradeChange(item.key, val)}
        />
      ))}     
      <GradeWithIcons
        title="–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞"
        iconLabels={[<IconSmileLeft />, <IconSmileRight />]}        
        onChange={(val) => handleGradeChange("overall", val)}
      />     
      <div className={style.commentBlock}>
        <label htmlFor="comment" >–ö–æ–º–µ–Ω—Ç–∞—Ä:</label>
        <textarea
          id="comment"
          className={style.textarea}
          value={comment}
          onChange={(e) => setComment(e.target.value)}
          placeholder="–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä...."
        />
      </div>      
      <Button
        type="submit"
        name="–ó–±–µ—Ä–µ–≥—Ç–∏"
        onClick={onCloseForm}
        disabled={!isFormValid}
      />
     
      {isActive&&
      <Modal onClose={onCloseForm}>                    
        <CardSaveEvalutions onClose={onCloseForm} onSubmit={handleSubmitForm} disabled={!isFormValid} isSent={isSent}/>
      </Modal>}     
    </div>
  );
};
